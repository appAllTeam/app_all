"use strict";
<<<<<<< HEAD
Object.defineProperty(exports, "__esModule", { value: true });
exports.withAppleAuthentication = void 0;
=======
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
>>>>>>> 9a347bca
const core_plugins_1 = require("../core-plugins");
const ios_plugins_1 = require("../ios-plugins");
const static_plugins_1 = require("../static-plugins");
const packageName = 'expo-apple-authentication';
const withAppleSignInEntitlement = ios_plugins_1.createEntitlementsPlugin(setAppleSignInEntitlement, 'withAppleSignInEntitlement');
<<<<<<< HEAD
function setAppleSignInEntitlement(config, { 'com.apple.developer.applesignin': _, ...entitlementsPlist }) {
    var _a;
    if ((_a = config.ios) === null || _a === void 0 ? void 0 : _a.usesAppleSignIn) {
        return {
            ...entitlementsPlist,
            'com.apple.developer.applesignin': ['Default'],
        };
    }
    return entitlementsPlist;
}
const withAppleAuthentication = config => {
=======
function setAppleSignInEntitlement(config, _a) {
    var _b;
    var { 'com.apple.developer.applesignin': _ } = _a, entitlementsPlist = __rest(_a, ['com.apple.developer.applesignin']);
    if ((_b = config.ios) === null || _b === void 0 ? void 0 : _b.usesAppleSignIn) {
        return Object.assign(Object.assign({}, entitlementsPlist), { 'com.apple.developer.applesignin': ['Default'] });
    }
    return entitlementsPlist;
}
exports.withAppleAuthentication = config => {
>>>>>>> 9a347bca
    return static_plugins_1.withStaticPlugin(config, {
        _isLegacyPlugin: true,
        plugin: packageName,
        // If the static plugin isn't found, use the unversioned one.
        fallback: withUnversionedAppleAuthentication,
    });
};
<<<<<<< HEAD
exports.withAppleAuthentication = withAppleAuthentication;
=======
>>>>>>> 9a347bca
const withUnversionedAppleAuthentication = core_plugins_1.createRunOncePlugin(config => {
    config = withAppleSignInEntitlement(config);
    return config;
}, packageName);
exports.default = exports.withAppleAuthentication;
//# sourceMappingURL=expo-apple-authentication.js.map